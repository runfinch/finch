// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: disk.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	afero "github.com/spf13/afero"
)

// UserDataDiskManager is a mock of UserDataDiskManager interface.
type UserDataDiskManager struct {
	ctrl     *gomock.Controller
	recorder *UserDataDiskManagerMockRecorder
}

// UserDataDiskManagerMockRecorder is the mock recorder for UserDataDiskManager.
type UserDataDiskManagerMockRecorder struct {
	mock *UserDataDiskManager
}

// NewUserDataDiskManager creates a new mock instance.
func NewUserDataDiskManager(ctrl *gomock.Controller) *UserDataDiskManager {
	mock := &UserDataDiskManager{ctrl: ctrl}
	mock.recorder = &UserDataDiskManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserDataDiskManager) EXPECT() *UserDataDiskManagerMockRecorder {
	return m.recorder
}

// DetachUserDataDisk mocks base method.
func (m *UserDataDiskManager) DetachUserDataDisk() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachUserDataDisk")
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachUserDataDisk indicates an expected call of DetachUserDataDisk.
func (mr *UserDataDiskManagerMockRecorder) DetachUserDataDisk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachUserDataDisk", reflect.TypeOf((*UserDataDiskManager)(nil).DetachUserDataDisk))
}

// EnsureUserDataDisk mocks base method.
func (m *UserDataDiskManager) EnsureUserDataDisk() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUserDataDisk")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUserDataDisk indicates an expected call of EnsureUserDataDisk.
func (mr *UserDataDiskManagerMockRecorder) EnsureUserDataDisk() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUserDataDisk", reflect.TypeOf((*UserDataDiskManager)(nil).EnsureUserDataDisk))
}

// MockdiskFS is a mock of diskFS interface.
type MockdiskFS struct {
	ctrl     *gomock.Controller
	recorder *MockdiskFSMockRecorder
}

// MockdiskFSMockRecorder is the mock recorder for MockdiskFS.
type MockdiskFSMockRecorder struct {
	mock *MockdiskFS
}

// NewMockdiskFS creates a new mock instance.
func NewMockdiskFS(ctrl *gomock.Controller) *MockdiskFS {
	mock := &MockdiskFS{ctrl: ctrl}
	mock.recorder = &MockdiskFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiskFS) EXPECT() *MockdiskFSMockRecorder {
	return m.recorder
}

// Chmod mocks base method.
func (m *MockdiskFS) Chmod(name string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", name, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockdiskFSMockRecorder) Chmod(name, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chmod", reflect.TypeOf((*MockdiskFS)(nil).Chmod), name, mode)
}

// Chown mocks base method.
func (m *MockdiskFS) Chown(name string, uid, gid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", name, uid, gid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockdiskFSMockRecorder) Chown(name, uid, gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockdiskFS)(nil).Chown), name, uid, gid)
}

// Chtimes mocks base method.
func (m *MockdiskFS) Chtimes(name string, atime, mtime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chtimes", name, atime, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes.
func (mr *MockdiskFSMockRecorder) Chtimes(name, atime, mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chtimes", reflect.TypeOf((*MockdiskFS)(nil).Chtimes), name, atime, mtime)
}

// Create mocks base method.
func (m *MockdiskFS) Create(name string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockdiskFSMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockdiskFS)(nil).Create), name)
}

// Mkdir mocks base method.
func (m *MockdiskFS) Mkdir(name string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockdiskFSMockRecorder) Mkdir(name, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockdiskFS)(nil).Mkdir), name, perm)
}

// MkdirAll mocks base method.
func (m *MockdiskFS) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockdiskFSMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockdiskFS)(nil).MkdirAll), path, perm)
}

// Name mocks base method.
func (m *MockdiskFS) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockdiskFSMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockdiskFS)(nil).Name))
}

// Open mocks base method.
func (m *MockdiskFS) Open(name string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockdiskFSMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockdiskFS)(nil).Open), name)
}

// OpenFile mocks base method.
func (m *MockdiskFS) OpenFile(name string, flag int, perm os.FileMode) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockdiskFSMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockdiskFS)(nil).OpenFile), name, flag, perm)
}

// ReadlinkIfPossible mocks base method.
func (m *MockdiskFS) ReadlinkIfPossible(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadlinkIfPossible", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadlinkIfPossible indicates an expected call of ReadlinkIfPossible.
func (mr *MockdiskFSMockRecorder) ReadlinkIfPossible(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadlinkIfPossible", reflect.TypeOf((*MockdiskFS)(nil).ReadlinkIfPossible), name)
}

// Remove mocks base method.
func (m *MockdiskFS) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockdiskFSMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockdiskFS)(nil).Remove), name)
}

// RemoveAll mocks base method.
func (m *MockdiskFS) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockdiskFSMockRecorder) RemoveAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockdiskFS)(nil).RemoveAll), path)
}

// Rename mocks base method.
func (m *MockdiskFS) Rename(oldname, newname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockdiskFSMockRecorder) Rename(oldname, newname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockdiskFS)(nil).Rename), oldname, newname)
}

// Stat mocks base method.
func (m *MockdiskFS) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockdiskFSMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockdiskFS)(nil).Stat), name)
}

// SymlinkIfPossible mocks base method.
func (m *MockdiskFS) SymlinkIfPossible(oldname, newname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SymlinkIfPossible", oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// SymlinkIfPossible indicates an expected call of SymlinkIfPossible.
func (mr *MockdiskFSMockRecorder) SymlinkIfPossible(oldname, newname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SymlinkIfPossible", reflect.TypeOf((*MockdiskFS)(nil).SymlinkIfPossible), oldname, newname)
}
