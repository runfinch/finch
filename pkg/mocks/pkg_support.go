// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/support (interfaces: SystemDeps)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// SupportSystemDeps is a mock of SystemDeps interface.
type SupportSystemDeps struct {
	ctrl     *gomock.Controller
	recorder *SupportSystemDepsMockRecorder
}

// SupportSystemDepsMockRecorder is the mock recorder for SupportSystemDeps.
type SupportSystemDepsMockRecorder struct {
	mock *SupportSystemDeps
}

// NewSupportSystemDeps creates a new mock instance.
func NewSupportSystemDeps(ctrl *gomock.Controller) *SupportSystemDeps {
	mock := &SupportSystemDeps{ctrl: ctrl}
	mock.recorder = &SupportSystemDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SupportSystemDeps) EXPECT() *SupportSystemDepsMockRecorder {
	return m.recorder
}

// Executable mocks base method.
func (m *SupportSystemDeps) Executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Executable indicates an expected call of Executable.
func (mr *SupportSystemDepsMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*SupportSystemDeps)(nil).Executable))
}
