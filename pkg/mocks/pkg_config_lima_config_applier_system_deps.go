// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/config (interfaces: LimaConfigApplierSystemDeps)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// LimaConfigApplierSystemDeps is a mock of LimaConfigApplierSystemDeps interface.
type LimaConfigApplierSystemDeps struct {
	ctrl     *gomock.Controller
	recorder *LimaConfigApplierSystemDepsMockRecorder
}

// LimaConfigApplierSystemDepsMockRecorder is the mock recorder for LimaConfigApplierSystemDeps.
type LimaConfigApplierSystemDepsMockRecorder struct {
	mock *LimaConfigApplierSystemDeps
}

// NewLimaConfigApplierSystemDeps creates a new mock instance.
func NewLimaConfigApplierSystemDeps(ctrl *gomock.Controller) *LimaConfigApplierSystemDeps {
	mock := &LimaConfigApplierSystemDeps{ctrl: ctrl}
	mock.recorder = &LimaConfigApplierSystemDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LimaConfigApplierSystemDeps) EXPECT() *LimaConfigApplierSystemDepsMockRecorder {
	return m.recorder
}

// Arch mocks base method.
func (m *LimaConfigApplierSystemDeps) Arch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Arch")
	ret0, _ := ret[0].(string)
	return ret0
}

// Arch indicates an expected call of Arch.
func (mr *LimaConfigApplierSystemDepsMockRecorder) Arch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Arch", reflect.TypeOf((*LimaConfigApplierSystemDeps)(nil).Arch))
}

// OS mocks base method.
func (m *LimaConfigApplierSystemDeps) OS() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OS")
	ret0, _ := ret[0].(string)
	return ret0
}

// OS indicates an expected call of OS.
func (mr *LimaConfigApplierSystemDepsMockRecorder) OS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OS", reflect.TypeOf((*LimaConfigApplierSystemDeps)(nil).OS))
}
