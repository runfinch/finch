// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/support/config.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// BundleConfig is a mock of BundleConfig interface.
type BundleConfig struct {
	ctrl     *gomock.Controller
	recorder *BundleConfigMockRecorder
}

// BundleConfigMockRecorder is the mock recorder for BundleConfig.
type BundleConfigMockRecorder struct {
	mock *BundleConfig
}

// NewBundleConfig creates a new mock instance.
func NewBundleConfig(ctrl *gomock.Controller) *BundleConfig {
	mock := &BundleConfig{ctrl: ctrl}
	mock.recorder = &BundleConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *BundleConfig) EXPECT() *BundleConfigMockRecorder {
	return m.recorder
}

// ConfigFiles mocks base method.
func (m *BundleConfig) ConfigFiles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFiles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ConfigFiles indicates an expected call of ConfigFiles.
func (mr *BundleConfigMockRecorder) ConfigFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFiles", reflect.TypeOf((*BundleConfig)(nil).ConfigFiles))
}

// LogFiles mocks base method.
func (m *BundleConfig) LogFiles() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogFiles")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LogFiles indicates an expected call of LogFiles.
func (mr *BundleConfigMockRecorder) LogFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogFiles", reflect.TypeOf((*BundleConfig)(nil).LogFiles))
}
