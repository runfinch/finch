// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: nerdctl.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NerdctlCommandSystemDeps is a mock of NerdctlCommandSystemDeps interface.
type NerdctlCommandSystemDeps struct {
	ctrl     *gomock.Controller
	recorder *NerdctlCommandSystemDepsMockRecorder
}

// NerdctlCommandSystemDepsMockRecorder is the mock recorder for NerdctlCommandSystemDeps.
type NerdctlCommandSystemDepsMockRecorder struct {
	mock *NerdctlCommandSystemDeps
}

// NewNerdctlCommandSystemDeps creates a new mock instance.
func NewNerdctlCommandSystemDeps(ctrl *gomock.Controller) *NerdctlCommandSystemDeps {
	mock := &NerdctlCommandSystemDeps{ctrl: ctrl}
	mock.recorder = &NerdctlCommandSystemDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NerdctlCommandSystemDeps) EXPECT() *NerdctlCommandSystemDepsMockRecorder {
	return m.recorder
}

// LookupEnv mocks base method.
func (m *NerdctlCommandSystemDeps) LookupEnv(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *NerdctlCommandSystemDepsMockRecorder) LookupEnv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*NerdctlCommandSystemDeps)(nil).LookupEnv), key)
}
