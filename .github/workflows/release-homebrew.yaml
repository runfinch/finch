# "release" runner tag is to make target hosts deterministic for easy clean up.
# TODO: Remove the "release" runner tag when installer tests are stable.
name: Release Homebrew
on:
  workflow_dispatch:
  workflow_call:

jobs:
  get-latest-tag:
    name: Get the latest release tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.latesttag.outputs.tag }}
      version: ${{ steps.latestversion.outputs.version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
            fetch-depth: 0
      - name: 'Get the latest tag'
        id: latesttag
        uses: "WyriHaximus/github-action-get-previous-tag@04e8485ecb6487243907e330d522ff60f02283ce" # v1.4.0
      - name: 'Convert tag to version'
        id: latestversion
        run: |
          version=${{ steps.latesttag.outputs.tag }}
          if [ -z $version ]; then
            echo ERROR: Failed to get the latest tag
            exit 1
          fi
          if [[  $version == v* ]]; then
            version="${version:1}"
          fi
          echo "version=$version" >> ${GITHUB_OUTPUT}

  # TODO: fix the arm64 test installer.
  # Currently the first time of calling any Finch command in arm64 hosts triggered by Github action will fail by
  # the error "Error: Process completed with exit code 137." So the arm64 job will fail.
  # We temporarily use follow-up manual steps to complete and clean up it.
  macos-arm64-test-installer:
    needs: get-latest-tag
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            [self-hosted, macos, arm64, 11, release],
            [self-hosted, macos, arm64, 14, release],
            [self-hosted, macos, arm64, 13, release],
          ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    env:
      FINCH_TAG: ${{ needs.get-latest-tag.outputs.tag }}
      FINCH_VERSION: ${{ needs.get-latest-tag.outputs.version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ env.FINCH_TAG }}
          fetch-depth: 0
          persist-credentials: false
          submodules: true
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Clean up previous files
        run: |
          sudo rm -rf /opt/finch
          sudo rm -rf ~/.finch
          if pgrep '^qemu-system'; then
            sudo pkill '^qemu-system'
          fi
          if pgrep '^socket_vmnet'; then
            sudo pkill '^socket_vmnet'
          fi
          cd $(brew --repo homebrew/cask) 
          brew uninstall --cask ./Casks/f/finch.rb || true
        shell: zsh {0}
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@40a8596d17543401e57ee60f640c2a5df7c88904 # master
      - name: Bump local cask version
        run: |
          brew update-reset 
          # disable the default behaviour of downloading JSON files from formulae.brew.sh for pacakge installation since Homebrew 4.0.0
          # Ref. https://brew.sh/2023/02/16/homebrew-4.0.0/
          export HOMEBREW_NO_INSTALL_FROM_API=1
          cd $(brew --repo homebrew/cask)
          echo "Update the local Finch cask with version $FINCH_VERSION"
          brew bump-cask-pr --write-only -f --version=$FINCH_VERSION finch
        shell: zsh {0}
      - name: Silently install
        run: |
          export HOMEBREW_NO_INSTALL_FROM_API=1
          cd $(brew --repo homebrew/cask)
          brew install --cask ./Casks/f/finch.rb
        shell: zsh {0}
      - name: Install Rosetta 2
        run: echo "A" | softwareupdate --install-rosetta || true
      - name: Build project
        run: |
          brew install go lz4 automake autoconf libtool
          export PATH="/opt/homebrew/opt/libtool/libexec/gnubin:$PATH"
          make
        shell: zsh {0}
      - name: Multiple instances of Finch test
        run: |
          # start two Finch VM instances
          ./_output/bin/finch vm init
          finch vm init
          # start a container in each VM instance
          ./_output/bin/finch pull alpine
          finch pull alpine
          ./_output/bin/finch run --name test-ctr1 alpine
          finch run --name test-ctr2 alpine
          # check whether containers exist
          if ! ./_output/bin/finch ps -a | grep 'test-ctr1'; then
            echo "ERROR: The container test-ctr1 doesn't exist in the built finch VM"
            exit 1
          fi
          if ./_output/bin/finch ps -a | grep 'test-ctr2'; then
            echo "ERROR: The container test-ctr2 shoudn't exist in the built finch VM"
            exit 1
          fi
          if ! finch ps -a | grep 'test-ctr2'; then
            echo "ERROR: The container test-ctr2 doesn't exist in the installed finch VM"
            exit 1
          fi
          if finch ps -a | grep 'test-ctr1'; then
            echo "ERROR: The container test-ctr1 shoudn't exist in the installed finch VM"
            exit 1
          fi
          # clean up the VMs
          ./_output/bin/finch vm stop && ./_output/bin/finch vm remove
          finch vm stop && finch vm remove
      - name: Clean up multiple instance test
        run: |
          sudo rm -rf ./_output
          export HOMEBREW_NO_INSTALL_FROM_API=1
          cd $(brew --repo homebrew/cask)
          # Need to reinstall because there were errors on arm64 11.7 and arm64 12.6 hosts after running multiple instances tests,
          # that caused the VM initialization failure in the e2e test. 
          # Example workflow run https://github.com/runfinch/finch/actions/runs/4367457552/jobs/7638794529
          brew reinstall --cask ./Casks/f/finch.rb
        shell: zsh {0}
      - name: Run e2e tests
        uses: nick-fields/retry@14672906e672a08bd6eeb15720e9ed3ce869cdd4 # v2.9.0
        with:
          timeout_minutes: 180
          max_attempts: 3
          command: INSTALLED=true make test-e2e
      - name: Silently uninstall
        if: ${{ always() }}
        run: |
          cd $(brew --repo homebrew/cask)
          brew uninstall --zap --cask ./Casks/f/finch.rb
          if [ -d "/Applications/Finch" ]; then
            echo ERROR: Finch is not uninstalled
            exit 1
          fi
        shell: zsh {0}
  macos-amd64-test-installer:
    needs: get-latest-tag
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            [self-hosted, macos, amd64, 11, release],
            [self-hosted, macos, amd64, 14, release],
            [self-hosted, macos, amd64, 13, release],
          ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    env:
      FINCH_TAG: ${{ needs.get-latest-tag.outputs.tag }}
      FINCH_VERSION: ${{ needs.get-latest-tag.outputs.version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ env.FINCH_TAG }}
          fetch-depth: 0
          persist-credentials: false
          submodules: true
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod
          cache: true
      - name: Clean up previous files
        run: |
          sudo rm -rf /opt/finch
          sudo rm -rf ~/.finch
          if pgrep '^qemu-system'; then
            sudo pkill '^qemu-system'
          fi
          if pgrep '^socket_vmnet'; then
            sudo pkill '^socket_vmnet'
          fi
          cd $(brew --repo homebrew/cask) 
          brew uninstall --cask ./Casks/f/finch.rb || true
        shell: zsh {0}
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@40a8596d17543401e57ee60f640c2a5df7c88904 # master
      - name: Bump local cask version
        run: |
          brew update-reset 
          export HOMEBREW_NO_INSTALL_FROM_API=1
          cd $(brew --repo homebrew/cask)
          echo "Update the local Finch cask with version $FINCH_VERSION"
          brew bump-cask-pr --write-only -f --version=$FINCH_VERSION finch
        shell: zsh {0}
      - name: Silently install
        run: |
          export HOMEBREW_NO_INSTALL_FROM_API=1
          cd $(brew --repo homebrew/cask)
          brew install --cask ./Casks/f/finch.rb
        shell: zsh {0}
      - name: Install Rosetta 2
        run: echo "A" | softwareupdate --install-rosetta || true 
      - name: Build project
        run: |
          brew install go lz4 automake autoconf libtool
          export PATH="/opt/homebrew/opt/libtool/libexec/gnubin:$PATH"
          make
        shell: zsh {0}
      - name: Multiple instances of Finch test
        run: |
          # start two Finch VM instances
          ./_output/bin/finch vm init
          finch vm init
          # start a container in each VM instance
          ./_output/bin/finch pull alpine
          finch pull alpine
          ./_output/bin/finch run --name test-ctr1 alpine
          finch run --name test-ctr2 alpine
          # check whether containers exist
          if ! ./_output/bin/finch ps -a | grep 'test-ctr1'; then
            echo "ERROR: The container test-ctr1 doesn't exist in the built finch VM"
            exit 1
          fi
          if ./_output/bin/finch ps -a | grep 'test-ctr2'; then
            echo "ERROR: The container test-ctr2 shoudn't exist in the built finch VM"
            exit 1
          fi
          if ! finch ps -a | grep 'test-ctr2'; then
            echo "ERROR: The container test-ctr2 doesn't exist in the installed finch VM"
            exit 1
          fi
          if finch ps -a | grep 'test-ctr1'; then
            echo "ERROR: The container test-ctr1 shoudn't exist in the installed finch VM"
            exit 1
          fi
          # clean up the VMs
          ./_output/bin/finch vm stop && ./_output/bin/finch vm remove
          finch vm stop && finch vm remove
      - name: Clean up multiple instance test
        run: |
          sudo rm -rf ./_output
          export HOMEBREW_NO_INSTALL_FROM_API=1
          cd $(brew --repo homebrew/cask)
          brew reinstall --cask ./Casks/f/finch.rb
        shell: zsh {0}
      - name: Run e2e tests
        uses: nick-fields/retry@14672906e672a08bd6eeb15720e9ed3ce869cdd4 # v2.9.0
        with:
          timeout_minutes: 180
          max_attempts: 3
          command: INSTALLED=true make test-e2e
      - name: Silently uninstall
        if: ${{ always() }}
        run: |
          cd $(brew --repo homebrew/cask)
          brew uninstall --zap --cask ./Casks/f/finch.rb
          if [ -d "/Applications/Finch" ]; then
            echo ERROR: Finch is not uninstalled
            exit 1
          fi
        shell: zsh {0}
  pr-to-homebrew:
    needs: [get-latest-tag, macos-arm64-test-installer, macos-amd64-test-installer]
    runs-on: macos-latest
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@40a8596d17543401e57ee60f640c2a5df7c88904 # master
      - name: Open a pull request to homebrwe-cask
        run: brew bump-cask-pr --version=${FINCH_VERSION} finch
        shell: zsh {0}
        env:
          FINCH_VERSION: ${{ needs.get-latest-tag.outputs.version }}
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.HOMEBREW_GITHUB_API_TOKEN }}
        
