name: e2e-linux
on:
  workflow_call:
    inputs:
      os:
        type: string
        required: true
      arch:
        type: string
        required: true
      version:
        type: string
        required: true
      runner-type:
        type: string
        required: true

permissions:
  # This is required for configure-aws-credentials to request an OIDC JWT ID token to access AWS resources later on.
  # More info: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
  id-token: write
  # This is required for actions/checkout
  contents: read

jobs:
  test:
    runs-on:
      [
        "self-hosted",
        "${{ inputs.os }}",
        "${{ inputs.arch }}",
        "${{ inputs.version }}",
        "${{ inputs.runner-type }}",
      ]
    timeout-minutes: 60
    outputs:
      has_creds: ${{ steps.vars.outputs.has_creds}}
      vm_report: ${{ steps.set-multiple-vars.outputs.VM_REPORT }}
      container_report: ${{ steps.set-multiple-vars.outputs.CONTAINER_REPORT }}
      vm_serial_report: ${{ steps.set-multiple-vars.outputs.VM_SERIAL_REPORT }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        # checkout uses node version 20, which doesn't run on AL2
        if: ${{ ! (startsWith(inputs.os, 'amazon') && inputs.version == '2' ) }}
        with:
          # We need to get all the git tags to make version injection work. See VERSION in Makefile for more detail.
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive
      - name: Check repo out manually
        if: ${{ (startsWith(inputs.os, 'amazon') && inputs.version == '2' ) }}
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY}.git .
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            git config --add remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            git config --add remote.origin.fetch "+refs/tags/*:refs/tags/*"
            git config --add remote.origin.fetch "+${GITHUB_SHA}:${GITHUB_REF}"
          fi
          git fetch --prune origin
          git checkout ${GITHUB_SHA}
      - name: Set output variables
        id: vars
        run: |
          has_creds=${{ (github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name) && github.actor != 'dependabot[bot]' }}
          echo "has_creds=$has_creds" >> $GITHUB_OUTPUT
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9 # v4.0.3
        # this action requires node20, skip on AL2
        if: ${{ steps.vars.outputs.has_creds == 'true' && (!(startsWith(inputs.os, 'amazon') && inputs.version == '2' ))}}
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: credhelper-test
          aws-region: ${{ secrets.REGION }}
      - name: Clean up previous files
        if: always()
        run: |
          sudo systemctl stop finch.service || true
          sudo systemctl stop finch-buildkit.service || true
          sudo systemctl stop finch-soci.service || true
          sudo sudo rpm -e runfinch-finch || true
          sudo systemctl stop containerd.service
          sudo systemctl daemon-reload
          sudo rm -rf /etc/finch
          sudo rm -rf /var/lib/finch
          sudo rm -rf /var/lib/containerd
          sudo rm -rf /var/soci-snapshotter
          sudo rm -rf ./_output
      - name: Build project
        run: |
          ./contrib/packaging/rpm/build.sh --local
      - name: Install Finch
        run: |
          sudo rpm -i ./_output/packages/$(ls -t ./_output/packages/ | grep runfinch-finch | head -1)
          sudo systemctl daemon-reload
          sudo systemctl start containerd.service
          sudo systemctl start finch.service
          sudo systemctl start finch-buildkit.service
          sudo systemctl start finch-soci.service
      - name: Set up REPORT_DIR
        run: |
          echo "REPORT_DIR=${{ github.workspace }}/reports" >> $GITHUB_ENV
      - name: Run e2e tests
        run: |
          git status
          git clean -f -d
          # required by one of the tests which uses SSH_AUTH_SOCK
          eval "$(ssh-agent -s)"
          INSTALLED=true REGISTRY=${{ steps.vars.outputs.has_creds == true && env.REGISTRY || '' }} sudo -E make test-e2e-container
          INSTALLED=true REGISTRY=${{ steps.vars.outputs.has_creds == true && env.REGISTRY || '' }} sudo -E make test-e2e-vm
      - name: Change ownership of reports
        if: always()
        run: |
          if [ ! -d "$REPORT_DIR" ]; then
            echo "Error: Directory $REPORT_DIR does not exist."
            exit 1
          fi

          USER=$(whoami)
          GROUP=$(id -gn)

          if sudo chown -R "$USER:$GROUP" "$REPORT_DIR"; then
            echo "Ownership of $REPORT_DIR changed to $USER:$GROUP"
          else
            echo "Error: Failed to change ownership of $REPORT_DIR"
            exit 1
          fi
      - name: Set artifacts name outputs
        if: ${{ steps.vars.outputs.has_creds == 'true' && (!(startsWith(inputs.os, 'amazon') && inputs.version == '2' ))}}
        id: set-multiple-vars
        run: |
          echo "VM_REPORT=${{ github.run_id }}-${{ github.run_attempt }}-e2e-vm-report.json" >> $GITHUB_OUTPUT
          echo "CONTAINER_REPORT=${{ github.run_id }}-${{ github.run_attempt }}-e2e-container-report.json" >> $GITHUB_OUTPUT
          echo "VM_SERIAL_REPORT=${{ github.run_id }}-${{ github.run_attempt }}-e2e-vm-serial-report.json" >> $GITHUB_OUTPUT
      - name: Upload reports artifact
        if: ${{ steps.vars.outputs.has_creds == 'true' && (!(startsWith(inputs.os, 'amazon') && inputs.version == '2' ))}}
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: linux-${{ inputs.version }}-test-e2e-${{ inputs.arch }}-${{ github.run_id }}-${{ github.run_attempt }}-e2e-reports
          path: ${{ github.workspace }}/reports/${{ github.run_id }}-${{ github.run_attempt }}-*.json
      - name: Clean up repo AL2
        if: ${{ (startsWith(inputs.os, 'amazon') && inputs.version == '2' && always() ) }}
        run: |
          rm -rf "${GITHUB_WORKSPACE}"
  upload-e2e-test-reports:
    needs: test
    if: always()
    uses: ./.github/workflows/upload-test-report.yaml
    secrets: inherit
    with:
      os: ${{ inputs.os }}
      arch: ${{ inputs.arch }}
      version: ${{ inputs.version }}
      test-command: "test-e2e"
      has-creds: ${{ needs.test.outputs.has_creds }}
      vm_report: ${{ needs.test.outputs.vm_report }}
      container_report: ${{ needs.test.outputs.container_report }}
      vm_serial_report: ${{ needs.test.outputs.vm_serial_report }}
