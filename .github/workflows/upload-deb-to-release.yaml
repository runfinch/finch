name: Upload deb
on:
  workflow_dispatch: # Trigger this workflow from tag
    inputs:
      ref_name:
        required: true
        type: string
  workflow_call:
    inputs:
      ref_name:
        required: true
        type: string

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write   # This is required for uploading the release assets
jobs:
  get-tag-and-version:
    name: Get tag name
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      tag: ${{ steps.check-tag.outputs.tag }}
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - name: Check tag from workflow input and github ref
        id: check-tag
        run: |
          if [ -n "${{ inputs.ref_name }}" ]; then
            tag=${{ inputs.ref_name }}
          else
            tag=${{ github.ref_name }}
          fi
          echo "tag=$tag" >> ${GITHUB_OUTPUT}

          version=${tag#v}
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version matches format: $version"
          else
            echo "Error: Version $version doesn't match format."
            exit 1
          fi
          echo "version=$version" >> ${GITHUB_OUTPUT}
  upload-deb:
    needs: get-tag-and-version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Configure Signing AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: ${{ secrets.DEB_ROLE_PROD }}
          role-session-name: ubuntu-deb
          aws-region: us-west-2
      - name: Download deb and signature files
        run: |
          MAX_RETRIES=25
          RETRY_COUNT=0
          RETRY_SLEEP_SECONDS=15
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_SIGNED_PROD }}/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb.sig runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb.sig && \
              aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_SIGNED_PROD }}/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb.sig runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb.sig && \
              aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_UNSIGNED_PROD }}/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb && \
              aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_UNSIGNED_PROD }}/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb && \
              aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_SIGNED_PROD }}/publickey.pem publickey.pem && \
              aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_UNSIGNED_PROD }}/Release Release; then
              echo "Downloaded deb and signature files successfully."
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Retrying in $RETRY_SLEEP_SECONDS seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
              sleep $RETRY_SLEEP_SECONDS
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Max retries reached. Exiting..."
            exit 1
          fi
      - name: Setup APT repository structure
        run: |
          mkdir -p pool/main/f/runfinch-finch/
          mkdir -p dists/noble/main/
          mkdir dists/noble/main/binary-amd64/
          mkdir dists/noble/main/binary-arm64/

          mv runfinch-finch_* pool/main/f/runfinch-finch/
          mv publickey.pem pool/main/f/runfinch-finch/
          mv Release dists/noble/

          dpkg-scanpackages --arch amd64 pool/main > dists/noble/main/binary-amd64/Packages
          gzip -k dists/noble/main/binary-amd64/Packages

          dpkg-scanpackages --arch arm64 pool/main > dists/noble/main/binary-arm64/Packages
          gzip -k dists/noble/main/binary-arm64/Packages

          KEY_ID=$(sudo gpg --import pool/main/f/runfinch-finch/publickey.pem 2>&1 | grep "gpg: key" | cut -d' ' -f3 | cut -d':' -f1)
          sudo gpg --import pool/main/f/runfinch-finch/publickey.pem && sudo gpg --export --armor $KEY_ID > GPG_KEY.pub
      - name: Configure Artifacts AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: ubuntu-deb-create-release
          aws-region: ${{ secrets.REGION }}
      - name: Append to Packages and generate final Release
        run: |
          aws s3 cp cp s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/main/binary-amd64/Packages PackagesAMD64 || touch PackagesAMD64
          aws s3 cp cp s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/main/binary-arm64/Packages PackagesARM64 || touch PackagesARM64

          if [ -s PackagesAMD64 ]; then
            echo "" >> dists/noble/main/binary-amd64/Packages
            cat PackagesAMD64 >> dists/noble/main/binary-amd64/Packages
            gzip -kf dists/noble/main/binary-amd64/Packages
          fi

          if [ -s PackagesARM64 ]; then
            echo "" >> dists/noble/main/binary-arm64/Packages
            cat PackagesARM64 >> dists/noble/main/binary-arm64/Packages
            gzip -kf dists/noble/main/binary-arm64/Packages
          fi

          echo "Date: $(date -Ru)" >> dists/noble/Release
          {
          echo "MD5Sum:"
          for f in dists/noble/main/binary-*/Packages*; do
            echo " $(md5sum $f | cut -d' ' -f1) $(wc -c < $f) ${f#dists/noble/}"
          done
          echo "SHA1:"
          for f in dists/noble/main/binary-*/Packages*; do
            echo " $(sha1sum $f | cut -d' ' -f1) $(wc -c < $f) ${f#dists/noble/}"
          done
          echo "SHA256:"
          for f in dists/noble/main/binary-*/Packages*; do
            echo " $(sha256sum $f | cut -d' ' -f1) $(wc -c < $f) ${f#dists/noble/}"
          done
          } >> dists/noble/Release
      - name: Configure Signing AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: ${{ secrets.DEB_ROLE_PROD }}
          role-session-name: ubuntu-deb
          aws-region: us-west-2
      - name: Get signed Release 
        run: |
          aws s3 cp dists/noble/Release s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_UNSIGNED_PROD }}/Release_${{ needs.get-tag-and-version.outputs.version }}
          MAX_RETRIES=10
          RETRY_COUNT=0
          RETRY_SLEEP_SECONDS=5

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_SIGNED_PROD }}/Release_${{ needs.get-tag-and-version.outputs.version }}.sig Release.gpg && \
              aws s3 cp s3://${{ secrets.DEB_PRIVATE_BUCKET_NAME_SIGNED_PROD }}/Release_${{ needs.get-tag-and-version.outputs.version }} Release; then
              echo "Downloaded Release and signed Release files successfully."
              break
            else
              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Retrying in $RETRY_SLEEP_SECONDS seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
              sleep $RETRY_SLEEP_SECONDS
            fi
          done

          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Max retries reached. Exiting..."
            exit 1
          fi

          mv Release.gpg dists/noble/
          mv Release dists/noble/
      - name: Configure Artifacts AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: ubuntu-deb-create-release
          aws-region: ${{ secrets.REGION }}
      - name: Upload repository files to repository bucket
        run: |
          aws s3 cp pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/pool/main/f/runfinch-finch/
          aws s3 cp pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb.sig s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/pool/main/f/runfinch-finch/
          aws s3 cp pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/pool/main/f/runfinch-finch/
          aws s3 cp pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb.sig s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/pool/main/f/runfinch-finch/
          aws s3 cp pool/main/f/runfinch-finch/publickey.pem s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/pool/main/f/runfinch-finch/

          aws s3 cp dists/noble/Release s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/
          aws s3 cp dists/noble/Release.gpg s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/
          aws s3 cp dists/noble/main/binary-amd64/Packages s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/main/binary-amd64/
          aws s3 cp dists/noble/main/binary-amd64/Packages.gz s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/main/binary-amd64/
          aws s3 cp dists/noble/main/binary-arm64/Packages s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/main/binary-arm64/
          aws s3 cp dists/noble/main/binary-arm64/Packages.gz s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/dists/noble/main/binary-arm64/

          aws s3 cp GPG_KEY.pub s3://${{ secrets.ARTIFACT_BUCKET_NAME }}/deb/

          aws cloudfront create-invalidation --distribution-id ${{ secrets.ARTIFACTS_DISTRO_ID_PROD }} --paths "/deb/dists/noble/Release" "/deb/dists/noble/Release.gpg" "/deb/dists/noble/main/binary-amd64/Packages*" "/deb/dists/noble/main/binary-arm64/Packages*"

      - name: Upload deb archives and signatures to release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v0.1.15
        with:
          tag_name: ${{ needs.get-tag-name.outputs.version }}
          files: |
            pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb
            pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_amd64.deb.sig
            pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb
            pool/main/f/runfinch-finch/runfinch-finch_${{ needs.get-tag-and-version.outputs.version }}_arm64.deb.sig
            pool/main/f/runfinch-finch/publickey.pem
      - name: Delete deb and signature files
        run: |
          rm -rf runfinch-finch_* publcikey.pem pool/ dists/ GPG_KEY.pub PackagesAMD64 PackagesARM64
