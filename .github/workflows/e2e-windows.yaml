name: e2e-windows
on:
  workflow_call:
    inputs:
      arch:
        type: string
        required: true
      runner-type:
        type: string
        required: true
      test-command:
        type: string
        required: true

permissions:
  # This is required for configure-aws-credentials to request an OIDC JWT ID token to access AWS resources later on.
  # More info: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
  id-token: write
  # This is required for actions/checkout
  contents: read

jobs:
  test:
    timeout-minutes: 180
    runs-on:
      [
        "self-hosted",
        "windows",
        "${{ inputs.arch }}",
        "${{ inputs.runner-type }}",
      ]
    steps:
      - name: Configure git CRLF settings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Cleanup previous checkouts
        run: |
          takeown /F C:\actions-runner\_work\finch /R
          Remove-Item C:\actions-runner\_work\finch\finch -Recurse -Force -ErrorAction Ignore
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # We need to get all the git tags to make version injection work. See VERSION in Makefile for more detail.
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive
      - name: Set output variables
        id: vars
        run: |
          $has_creds="${{ (github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name) && github.actor != 'dependabot[bot]'}}"
          echo "has_creds=$has_creds" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          exit 0 # if $has_creds is false, powershell will exit with code 1 and this step will fail
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        if: env.has_creds == 'true'
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: credhelper-test
          aws-region: ${{ secrets.REGION }}
      - name: Echo GitHub context, and os information
        run: |
          echo "GitHub Context Information:"
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.repository: ${{ github.repository }}"     
          echo "github.event.pull_request.head.repo.full_name: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "github.actor: ${{ github.actor }}"
          echo "startsWith(inputs.os, 'amazon'): ${{ startsWith(inputs.os, 'amazon') }}"
          echo "inputs.version: ${{ inputs.version}}"    
          echo "inputs.version: ${{ inputs.version}}"   
          echo "left side: steps.vars.outputs.has_creds: ${{ steps.vars.outputs.has_creds }} " 
          echo "left side(guess): steps.vars.outputs.has_creds == true: ${{ steps.vars.outputs.has_creds == true}}"
          echo "left side(guess): steps.vars.outputs.has_creds == 'true': ${{ steps.vars.outputs.has_creds == 'true'}}"           
          echo "!(startsWith(inputs.os, 'amazon') && inputs.version == '2'): ${{ !(startsWith(inputs.os, 'amazon') && inputs.version == '2') }}"  
          echo "if statement to allow AWS credentials: ${{ steps.vars.outputs.has_creds == true && (!(startsWith(inputs.os, 'amazon') && inputs.version == '2' ))}}"   
      - name: Verify AWS credentials configuration
        if: ${{ steps.vars.outputs.has_creds == true && (!(startsWith(inputs.os, 'amazon') && inputs.version == '2' ))}}
        run: |
          echo "Verifying AWS credentials configuration."            
      - name: Remove Finch VM
        timeout-minutes: 2
        run: |
          # We want these cleanup commands to always run, ignore errors so the step completes.
          $ErrorActionPreference = 'Ignore'
          taskkill /f /im wslservice.exe 2> nul || cmd /c "exit /b 0"
          wsl --list --verbose
          wsl --shutdown
          wsl --unregister lima-finch
          wsl --list --verbose
      - name: Clean up previous files
        run: |
          Remove-Item C:\Users\Administrator\.finch -Recurse -ErrorAction Ignore
          Remove-Item C:\Users\Administrator\AppData\Local\.finch -Recurse -ErrorAction Ignore
          make clean
          cd deps/finch-core && make clean
      - name: Build project
        run: |
          git status
          make
      - name: Run e2e tests
        run: |
          # set path to use newer ssh version
          $newPath = (";C:\Program Files\Git\bin\;" + "C:\Program Files\Git\usr\bin\;" + "$env:Path")
          $env:Path = $newPath

          # set networking config option to allow for VM/container -> host communication
          echo "[experimental]`nnetworkingMode=mirrored`nhostAddressLoopback=true" > C:\Users\Administrator\.wslconfig

          git status
          git clean -f -d
          make ${{ inputs.test-command }}
      - name: Check and upload e2e tests reports to s3 bucket
        run: |
          VM_REPORT="${{ github.workspace }}/reports/${{ github.run_id }}-${{ github.run_attempt }}-e2e-vm-report.json"
          CONTAINER_REPORT="${{ github.workspace }}/reports/${{ github.run_id }}-${{ github.run_attempt }}-e2e-container-report.json"
          
          if [ -f "$VM_REPORT" ]; then
            echo "VM report file exists. Uploading to S3..."
            aws s3 cp "$VM_REPORT" "s3://finch-e2e-test-log-reports/${{ inputs.os }}-${{ inputs.arch }}/${{ github.run_id }}-${{ github.run_attempt }}-e2e-vm-report.json"
            echo "VM report uploaded successfully."
          else
            echo "VM report file does not exist. Skipping upload."
          fi
          
          if [ -f "$CONTAINER_REPORT" ]; then
            echo "Container report file exists. Uploading to S3..."
            aws s3 cp "$CONTAINER_REPORT" "s3://finch-e2e-test-log-reports/${{ inputs.os }}-${{ inputs.arch }}/${{ github.run_id }}-${{ github.run_attempt }}-e2e-container-report.json"
            echo "Container report uploaded successfully."
          else
            echo "Container report file does not exist. Skipping upload."
          fi           
      - name: Remove Finch VM and Clean Up Previous Environment
        if: ${{ always() }}
        timeout-minutes: 2
        run: |
          # We want these cleanup commands to always run, ignore errors so the step completes.
          $ErrorActionPreference = 'Ignore'
          taskkill /f /im wslservice.exe 2> nul || cmd /c "exit /b 0"
          wsl --list --verbose
          wsl --shutdown
          wsl --unregister lima-finch
          wsl --list --verbose
          Remove-Item C:\Users\Administrator\AppData\Local\.finch -Recurse
          make clean
          cd deps/finch-core && make clean
          exit 0 # Cleanup may set the exit code e.g. if a file doesn't exist; just ignore
