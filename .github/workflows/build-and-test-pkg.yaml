name: Build, test and upload .msi to S3

# TODO: add scheduler and tests
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      ref_name:
        required: true
        type: string
env:
  GO111MODULE: on

permissions:
  # This is required for configure-aws-credentials to request an OIDC JWT ID token to access AWS resources later on.
  # More info: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings
  id-token: write
  contents: read    # This is required for actions/checkout

jobs:
  get-tag-name:
    name: Get tag name
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check-tag.outputs.tag }}
      version: ${{ steps.check-tag.outputs.version }}
    steps:
      - name: Check tag from workflow input and github ref
        id: check-tag
        run: |
          if [ -n "${{ inputs.ref_name }}" ]; then
            tag=${{ inputs.ref_name }}
          else
            tag=${{ github.ref_name }}
          fi
          echo "tag=$tag" >> ${GITHUB_OUTPUT}

          version=${tag#v}
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version matches format: $version"
          else
            echo "Version $version doesn't match format. Using test version: 0.0.1"
            version="0.0.1"
          fi
          echo "version=$version" >> ${GITHUB_OUTPUT}

  msi-e2e-tests:
    needs:
      - get-tag-name
    strategy:
      fail-fast: false
    runs-on: [self-hosted, windows, amd64, release]
    timeout-minutes: 180
    steps:
      - name: Configure git CRLF settings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Set up Python
        uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: '3.x'
      - name: Install AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install awscli
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          ref: ${{ needs.get-tag-name.outputs.tag }}
          fetch-depth: 0
          persist-credentials: false
          submodules: recursive
      - name: Set output variables
        id: vars
        run: |
          $has_creds="${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name }}"
          echo "has_creds=$has_creds" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          exit 0 # if $has_creds is false, powershell will exit with code 1 and this step will fail
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE }}
          role-session-name: msi-test
          aws-region: ${{ secrets.REGION }}
      - name: Remove Finch VM
        run: |
          wsl --list --verbose
          wsl --shutdown
          wsl --unregister lima-finch
          wsl --list --verbose
      - name: Clean up previous files
        run: |
          Remove-Item C:\Users\Administrator\.finch -Recurse -ErrorAction Ignore
          Remove-Item C:\Users\Administrator\AppData\Local\.finch -Recurse -ErrorAction Ignore
      - name: Uninstall Finch silently
        run: |
          $productCode = (Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*Finch*" } | Select-Object -ExpandProperty IdentifyingNumber)
          if ($productCode) {
              msiexec /x $productCode /qn
          } else {
              Write-Output "Finch not found or it wasn't installed using MSI."
          }
      - name: Download MSI from S3
        run: |
          $version="${{ needs.get-tag-name.outputs.version }}"
          aws s3 cp "s3://${{ secrets.INSTALLER_PRIVATE_BUCKET_NAME }}/Finch-$version.msi" ./Finch.msi
      - name: Install MSI silently
        run: |
          Start-Process 'Finch.msi' -ArgumentList '/quiet' -Wait
          $env:PATH += ";C:\Program Files\Finch\bin"
      - name: Run e2e tests
        run: |
          # set path to use newer ssh version
          $newPath = (";C:\Program Files\Git\bin\;" + "C:\Program Files\Git\usr\bin\;" + "$env:Path")
          $env:Path = $newPath
          # set networking config option to allow for VM/container -> host communication
          echo "[experimental]`nnetworkingMode=mirrored`nhostAddressLoopback=true" > C:\Users\Administrator\.wslconfig
          
          git status
          git clean -f -d
          $env:INSTALLED="true"
          make test-e2e
      - name: Uninstall Finch silently
        if: always()
        run: |
          $productCode = (Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*Finch*" } | Select-Object -ExpandProperty IdentifyingNumber)
          if ($productCode) {
              msiexec /x $productCode /qn
          } else {
              Write-Output "Finch not found or it wasn't installed using MSI."
          }
      - name: Delete installer
        if: always()
        run: |
          Remove-Item "./Finch.msi" -Force
      